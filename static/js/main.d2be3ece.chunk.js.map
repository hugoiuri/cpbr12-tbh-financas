{"version":3,"sources":["components/Header.jsx","components/TreemapView.jsx","components/Contract.jsx","pages/HomePage.jsx","pages/ContractPage.jsx","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","Link","to","TreeMapView","state","methods","data","size","d","value","groupBy","numOriginalContrato","concat","id","tooltipConfig","body","table","codOrgao","txtTipoContratacao","status","saldoEmpenhado","saldoLiquidado","footer","title","on","click","document","querySelector","style","display","_this","history","push","code","shapeConfig","fill","legend","this","es","config","React","Component","withRouter","Contract","codigoContrato","console","log","dadosContrato","dataBase","find","element","toString","credores","txtRazaoSocial","txtDescricaoModalidade","txtObjetoContrato","numCpfCnpj","codProcesso","datAssinaturaContrato","datVigencia","valorTotal","valTotalEmpenhado","valLiquidado","valPago","mediaPrevista","mediaEmpenhada","mediaLiquidado","HomePage","TreemapView","ContractPage","match","params","Boolean","window","location","hostname","createBrowserHistory","ReactDOM","render","BrowserRouter","basename","process","Switch","Route","path","exact","component","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2be3ece.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom'\n\nexport default props =>\n  <nav className=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top pt-2 pb-2\">\n      <Link className=\"navbar-brand\" to=\"/\" >#CPBR12 - The Big Hackathon <small> - Finanças</small></Link>\n  </nav>","import React from 'react';\nimport { withRouter } from 'react-router';\nimport { Treemap } from 'd3plus-react'\n\nimport data from '../database/db2.json'\n\nclass TreeMapView extends React.Component {\n  state = {\n    methods: {\n      data,\n      size: d => d.value,\n      groupBy: d => d.numOriginalContrato != null\n      ? `Contrato: ${d.id} - Nº Original: ${d.numOriginalContrato}`\n      : `Contrato: ${d.id}`,\n      tooltipConfig: {\n        body: d => {\n          var table = \"<table class='tooltip-table'>\";\n          if(d.numOriginalContrato != null) {\n            table += `<tr><td class='title'>Número Original do Contrato: </td><td class='data'>${d.numOriginalContrato}</td></tr>`;\n          }\n          table += `<tr><td class='title'>Orgão: </td><td class='data'>${d.codOrgao}</td></tr>`;\n          table += `<tr><td class='title'>Tipo de Contratação: </td><td class='data'>${d.txtTipoContratacao}</td></tr>`;\n          table += `<tr><td class='title'>Status: </td><td class='data'>${d.status}</td></tr>`;\n          table += `<tr><td class='title'>Valor Total: </td><td class='data'>${d.value}</td></tr>`;\n          table += `<tr><td class='title'>Saldo Empenhado: </td><td class='data'>${d.saldoEmpenhado}</td></tr>`;\n          table += `<tr><td class='title'>Saldo Liquidado: </td><td class='data'>${d.saldoLiquidado}</td></tr>`;\n          table += '</table>';\n          return table;\n        },\n        footer: d => {\n          return \"<sub class='tooltip-footer'>Dados fornecidos pela Prodam</sub>\";\n        },\n        title: d => d.numOriginalContrato != null\n          ? `Contrato: ${d.id}<br/>Nº Original: ${d.numOriginalContrato}`\n          : `Contrato: ${d.id}`\n      },\n      on: {\n        click: d => {\n          document.querySelector('.d3plus-tooltip').style.display = 'none';\n          this.props.history.push(`/contract/${d.code}`);\n        }\n      },\n      shapeConfig: {\n        fill: d => {\n          if (d.status === 'Contrato vencido'\n            || d.status === 'Contrato vencido com saldo') {\n            return '#3c6382' \n          }\n  \n          if (d.status === 'Contrato com empenho inferior ao previsto'\n            || d.status === 'Contrato com pagamento em aberto'\n            || d.status === 'Contrato com empenho superior ao previsto') {\n            return '#fad390'\n          }\n  \n          return '#E74C3C';\n        }\n      },\n      legend: false\n    }  \n  }\n\n  render(){\n    const { state } = this;\n    return (\n      <Treemap config={state.methods} />\n    )\n  }\n}\n\nexport default withRouter(TreeMapView);","import React from 'react';\nimport dataBase from '../database/db2.json'\n\nexport default props => {\n  const { codigoContrato } = props;\n\n  console.log(codigoContrato);\n\n  if (!codigoContrato) return null;\n\n  let dadosContrato = dataBase.find(element => {\n    if (element.code.toString() === codigoContrato) {\n      return true\n    } else {\n      return false\n    }\n  });\n\n  // console.log(dadosContrato);\n  console.log(dadosContrato.credores[0])\n\n  return (\n    <div>\n      <div className=\"area-page\">\n        <div className=\"area-title\">\n          <h2>Detalhes do contrato</h2>\n          <h3>Status do Contrato: {dadosContrato.status}</h3>\n        </div>\n\n        <div className=\"area-details\">\n          <div className=\"field\"><span className=\"label\"> Razão social: </span> {dadosContrato.txtRazaoSocial}</div>\n          <div className=\"field\"><span className=\"label\"> Modalidade: </span> {dadosContrato.txtDescricaoModalidade}</div>\n          <div className=\"field\"><span className=\"label\"> Tipo de contratação: </span> {dadosContrato.txtTipoContratacao}</div>\n          <div className=\"field\"><span className=\"label\"> Orgão: </span> {dadosContrato.codOrgao}</div>\n          <div className=\"field\"><span className=\"label\"> Objeto do contrato: </span> {dadosContrato.txtObjetoContrato}</div>\n          <div className=\"field\"><span className=\"label\"> Razão Social do Credor: </span> {dadosContrato.credores[0].txtRazaoSocial}</div>\n          <div className=\"field\"><span className=\"label\"> CPF / CNPJ do Credor: </span> {dadosContrato.credores[0].numCpfCnpj}</div>\n          <div className=\"field\"><span className=\"label\"> Código do Contrato: </span> {dadosContrato.code}</div>\n          <div className=\"field\"><span className=\"label\"> Código Original do Contrato: </span> {dadosContrato.numOriginalContrato}</div>\n          <div className=\"field\"><span className=\"label\"> Código do processo: </span> {dadosContrato.codProcesso}</div>\n          <div className=\"field\"><span className=\"label\"> Data de assinatura do contrato: </span> {dadosContrato.datAssinaturaContrato}</div>\n          <div className=\"field\"><span className=\"label\"> Data de vigência do contrato: </span> {dadosContrato.datVigencia}</div>\n          <div className=\"field\"><span className=\"label\"> Valor total: </span> {dadosContrato.valorTotal},00</div>\n          <div className=\"field\"><span className=\"label\"> Valor total empenhado: </span> {dadosContrato.valTotalEmpenhado},00</div>\n          <div className=\"field\"><span className=\"label\"> Valor liquidado: </span> {dadosContrato.valLiquidado},00</div>\n          <div className=\"field\"><span className=\"label\"> Valor pago: </span> {dadosContrato.valPago},00</div>\n          <div className=\"field\"><span className=\"label\"> Saldo empenhado: </span> {dadosContrato.saldoEmpenhado},00</div>\n          <div className=\"field\"><span className=\"label\"> Saldo liquidado: </span> {dadosContrato.saldoLiquidado},00</div>\n          <div className=\"field\"><span className=\"label\"> Media prevista: </span> {dadosContrato.mediaPrevista},00</div>\n          <div className=\"field\"><span className=\"label\"> Media empenhada: </span> {dadosContrato.mediaEmpenhada},00</div>\n          <div className=\"field\"><span className=\"label\"> Media Liquidado: </span> {dadosContrato.mediaLiquidado},00</div>\n        </div>\n     </div>\n    </div>\n  );\n\n}","import React, { Component } from 'react';\nimport { Header, TreemapView } from '../components';\n\nexport default  class HomePage extends Component {\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <div className=\"container-fluid\">\n          <TreemapView />\n        </div>\n      </div>\n    );\n  };\n}","import React, { Component } from 'react';\n\nimport { Header, Contract } from '../components';\n\nexport default class ContractPage extends Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <div className=\"container-fluid page\">\n          <Contract codigoContrato={this.props.match.params.id} />\n        </div>\n      </div>\n    );\n  };\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport './css/index.css';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { HomePage, ContractPage } from './pages';\nimport * as serviceWorker from './serviceWorker';\n\nimport createBrowserHistory from \"history/createBrowserHistory\";\nconst history = createBrowserHistory()\n\nReactDOM.render(\n  <BrowserRouter history={history} basename={process.env.PUBLIC_URL}>\n    <Switch>\n      <Route path=\"/\" exact={true} component={HomePage} />\n      <Route path={\"/contract/:id\"} component={ContractPage} />\n    </Switch>\n  </BrowserRouter>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}